#!/usr/bin/env bash

# Attention!
# This file is intended to be extremely lean and simple.
# Containing only what is really unavoidable to be run manually
# so that the following tools can work.
# This was written with a bash script because it is linux native shell
# and may be executed right after installing the OS.

# install curl git
# link apt sources
# apt get keys
# apt upgrade

# ---------------------------------------------------------------------------

reset

set -e

export TERM=xterm-256color
export NO_COLOR=0

# shellcheck source=/dev/null
HOME=$(eval echo "~${SUDO_USER}") source ./zsh/startup/.zshenv ./zsh/functions/log_starting

sources_list_bkp_path="/etc/apt/sources.list.d-${TODAY}-${NOW}"

alias lsa='ls -lah'

function exit_defer() {
    echo 'finish'
    set +e
    exit 0
}

function err_defer() {
    echo 'trying rollback after error'
    [ -d "${sources_list_bkp_path}" ] && \
        sudo mv "${sources_list_bkp_path}" /etc/apt/sources.list.d
    set +e
    exit 1
}

function apt_init() {
    sudo apt-get update
    sudo apt-get --yes upgrade
    sudo apt-get install --yes \
        curl \
        git \
        make \
        python3-pip \
        sudo \
        ttf-mscorefonts-installer
}

function apt_sources_count_list_files() {
    apt_sources_found=$(find /etc/apt/sources.list.d/ -name '*.list' 2>/dev/null | wc -l || 0)
    echo "${apt_sources_found} sources file found"
}

function apt_sources_link() {
    echo 'apt updating, upgrading and installing basic packages'

    apt_sources_count_list_files

    if [ "${apt_sources_found}" -eq 0 ]; then
        echo 'moving apt sources and linking my own list files'
        # check if is a link before
        if [ -d "/etc/apt/sources.list.d" ] || [ -L "/etc/apt/sources.list.d" ]; then
            echo 'sources list path not exist or is a sym link. backup it.'
            sudo mv /etc/apt/sources.list.d "${sources_list_bkp_path}"
        fi
        apt_sources_count_list_files

        sudo ln -sf "${SYNC_DOTFILES}/etc/apt/sources.list.d" /etc/apt/sources.list.d

        # shellcheck source=/dev/null
        source ./zsh/functions/apt_keys_recovery
        HOME=$(eval echo "~${SUDO_USER}") apt_keys_recovery
        sudo apt update
    fi
}

trap exit_defer EXIT
trap err_defer ERR

# apt_init

# Move this do shell command into dotbot apt config
# apt_sources_link

echo "sanitizing git submodules"
cat < .gitmodules | grep '\[submodule' | while read -r item; do
    name=$(echo "$item" | sed -E 's/.*"(.*)".*/\1/g')
    path=$(git config --file ".gitmodules" --get "submodule.${name}.path")
    url=$(git config --file ".gitmodules" --get "submodule.${name}.url")

    echo "    submodule ${name} in ${path} by ${url}"

    if [ -d "${path}" ]; then
        echo "    ${path} not empty, purging it."

        git submodule deinit --force "${path}" 1>/dev/null || true

        /bin/rm -rf "${path}"
        /bin/rm -rf ".${path}"
    fi

    echo "    adding submodule ${name}"
    git submodule add --force "${url}" "${path}" 1>/dev/null

    echo -e "    done\n    ---"
done

# git submodule update --init --recursive --remote
