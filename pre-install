#!/usr/bin/env bash

# Attention!
# This file is intended to be extremely lean and simple.
# Containing only what is really unavoidable to be run manually
# so that the following tools can work.

# install curl git
# link apt sources
# apt get keys
# apt upgrade

# -----------------------------------------------------------------------------

apt update # maybe not
apt install --yes curl git python3-pip ttf-mscorefonts-installer


# shellcheck source=/dev/null
source ./zsh/init/10_debug.zsh

# shellcheck source=/dev/null
HOME=$(eval echo "~$SUDO_USER") source ./zsh/init/30_env.zsh

apt_sources_found=$(find /etc/apt/sources.list.d/ -name '*.list' | wc -l)
echo "$apt_sources_found sources file found"

if [ "$apt_sources_found" -eq 0 ]; then
    unlink /etc/apt/sources.list.d
    ln -sf "$SYNC_DOTFILES/etc/apt/sources.list.d" /etc/apt/sources.list.d
    # shellcheck source=/dev/null
    source ./zsh/apt.zsh
    HOME=$(eval echo "~$SUDO_USER") apt_keys_recovery
    apt update
fi

cat ".gitmodules" | grep 'submodule' | while read -r item; do
    item=$(echo "${item}" | sed -E 's/.*\"(.*)\".*/\1/')
    echo "sanitizing git submodule ${item}"
    if [ -z "$(ls -A ./"$item")" ]; then
        git submodule deinit --force --all "${item}" 2>/dev/null
        rm -rf "${item}" ".git/modules/${item}" 2>/dev/null
    fi
done

cat ".gitmodules" | grep 'url' | while read -r item; do
    item=$(echo "${item}" | sed 's/ //g' | cut -d'=' -f2)
    echo "adding git submodule ${item}"
    git submodule add --force "${item}" 2>/dev/null
done

git submodule update --init --recursive --remote
