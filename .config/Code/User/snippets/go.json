{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log(\"$1\");",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"prefix": "print",
		"body": [
			"",
			"fmt.Printf(\"\\n\\n foobar\\n%+v\\n\\n\", foobar)",
			"$0"
		],
	},
	"Pretty print to console": {
		"prefix": "pretty",
		"body": [
			"",
			"fmt.Printf(\"\\n\\033[0;32m************************** foobar **************************\\033[0m\\n\")",
			"pp.Println(foobar)",
			"fmt.Printf(\"\\n\\n\")",
			"\/\/ remember import github.com\/k0kubun\/pp",
			"$0"
		],
	},
	"Write file": {
		"prefix": "write",
		"body": [
			"",
			"if err := ioutil.WriteFile(fmt.Sprintf(`/tmp/artifact_%s/%s.json`,",
			"    time.Now().Format(time.RFC3339Nano),",
			"    regexp.MustCompile(`[\\\"\\=\\&\\[\\]\\{\\\"\\:\\,\\\/\\}]+`).ReplaceAllString(`jsonRequest`, `_`)),",
			"    []byte(`jsonResponse`), 999); err != nil {",
			"    panic(err)",
			"}",
			"$0"
		],
	},
}

