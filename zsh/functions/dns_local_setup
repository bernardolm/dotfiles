#!/usr/bin/env zsh

# How to call?
# source <(curl -s https://raw.githubusercontent.com/bernardolm/dotfiles/master/zsh/functions/dns_local_setup); WORKSPACE_USER=/path/to/clone dns_local_setup

function dns_local_setup() {
    local cat=$(which cat)
    local container_name="${CONTAINER_NAME:-ns1}"
    local custom_fallback_dns="${CUSTOM_FALLBACK_DNS}"
    local domain="${DOMAIN:-hud}"
    local gateway_ip=$(ip route show | grep -i 'default via' | awk '{ print $3 }' | head -1)
    local image_name="ruudud/devdns"
    local naming="unsafe"
    local path_to_clone="${WORKSPACE_USER:-$HOME}/devdns"
    local prohibited_dns="${PROHIBITED_DNS:-'1.1.1.1,1.1.0.0,8.8.8.8,8.8.4.4'}"

    function local_dns_instances_running() {
        echo "\n> Listing docker containers using image $image_name"
        docker ps -a -q --filter "ancestor=${image_name}:latest"
    }

    function kill_53_port_user() {
        echo "\n> killing process using port 53"
        sudo lsof -t -i:53 | while read -r pid; do
            sudo kill -9 "$pid"
        done
        sudo killall -HUP dnsmasq 2>/dev/null
    }

    function remove_local_dns_instances() {
        echo "\n> Removing local DNS docker containers"
        local_dns_instances_running | tail -n +3 | while read -r container_id; do
            echo "$container_id"
            docker stop "$container_id" 2>/dev/null
            docker rm "$container_id" 2>/dev/null
        done
    }

    function build_local_dns_image() {
        echo "\n> Building $image_name docker image"
        docker build \
            --quiet \
            --force-rm \
            -f "$path_to_clone/Dockerfile" \
            -t "$image_name" \
            "$path_to_clone"
    }

    function show_resolv_conf() {
        cat /etc/resolv.conf | grep -v -e '^#' | grep -v -e '^\s*$' | grep --color=never 'nameserver'
    }

    function show_network_manager_conf() {
        cat /etc/NetworkManager/NetworkManager.conf | grep -v -e '^#' | grep -v -e '^\s*$' | grep --color=never 'dns=dnsmasq'
    }

    function add_fallback_dns() {
        echo "\n> Configuring DNS resolver fallback"
        local has_gateway_ip=$(cat /etc/resolv.conf | grep -v -e '^#' | grep -c "$gateway_ip")

        echo "  Your current resolv.conf has\033[1;36m"
        show_resolv_conf
        echo "\033[0m"

        if [[ "$has_gateway_ip" == "0" ]]; then
            local to_add="nameserver $gateway_ip\t# current DNS from your router gateway"
            echo "$to_add" | sudo tee -a /etc/resolv.conf &>/dev/null

            echo "  Your changed resolv.conf is\033[1;36m"
            show_resolv_conf
            echo "\033[0m"
        fi

        if [[ -n "$custom_fallback_dns" ]]; then
            local to_add="nameserver $custom_fallback_dns\t# your custom DNS"
            echo "$to_add" | sudo tee -a /etc/resolv.conf &>/dev/null

            echo "  Your changed resolv.conf is\033[1;36m"
            show_resolv_conf
            echo "\033[0m"
        fi
    }

    function test_hosts() {
        echo "\n> Testing container name"
        dig "$container_name.$domain" | grep --color=never "$container_name.$domain"
        echo "\n> Testing some internet name"
        dig 'www.google.com' | grep --color=never 'www.google.com'
        echo "\n> Testing some local network name"
        dig 'spinnaker.hucloud.com.br' | grep --color=never 'spinnaker.hucloud.com.br'
    }

    function start_local_dns() {
        mkdir -p "$HOME/.$container_name/dnsmasq-hosts.d"

        echo "\n> Starting docker container $container_name"
        docker run -d \
            --name="$container_name" \
            --restart=always \
            -e DNS_DOMAIN="$domain" \
            -e FALLBACK_DNS="$gateway_ip" \
            -e NAMING="$naming" \
            -p 53:53/udp \
            -v /etc/resolv.conf:/mnt/resolv.conf \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            "$image_name"

        echo -n "  "
        docker logs -n-1 "$container_name"
    }

    reset

    echo "> Starting local DNS setup"
    local_dns_instances_running
    remove_local_dns_instances
    build_local_dns_image
    start_local_dns
    add_fallback_dns
    sleep 1
    test_hosts
    echo "\n> Local DNS setup finished"
}
